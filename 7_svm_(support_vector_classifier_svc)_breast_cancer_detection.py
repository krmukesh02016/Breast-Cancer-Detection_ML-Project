# -*- coding: utf-8 -*-
"""7.SVM-(Support Vector Classifier -SVC)_Breast_Cancer_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J5atS-p-McUtA8gXPViHhF1d3fn6Bt9y

# Support Vector Classifier

## Business Problem-Breast Cancer Detection Problem

#### Import Library
"""

import pandas as pd
import numpy as np

"""### Load DataSet"""

from sklearn.datasets import load_breast_cancer
data =load_breast_cancer()

# Show The Data Data in form of Dictonary
data.data

# Feature Of Data
data.feature_names

# Target Data
data.target

# target Names
data.target_names

"""NOTES:--

    'malignant'=>Breast CANCER , target=0

    'benign'   =>Not Breast cancer ,target=1

##### Create Dataset In DataFrame aformat
"""

df=pd.DataFrame(np.c_[data.data,data.target],columns=[list(data.feature_names)+['target']])
df

df.tail()

# Shape OF data
df.shape

# Total Patient=569
# Patient features=31

"""## Split Data"""

"""
 1.iloc(axis=None) -> _iLocIndexer
Purely integer-location based indexing for selection by position.
2.} .iloc[] is primarily integer position based (from 0 to
length-1 of the axis), but may also be used with a boolean
array.

Allowed inputs are:
An integer, e.g. 5.
A list or array of integers, e.g. [4, 3, 0].
A slice object with ints, e.g. 1:7.
A boolean array.
"""


df.iloc[0]

df.iloc[[0]]

df.iloc[:,0:-1]

df.iloc[:,-1]

X=df.iloc[:,0:-1]    # All Data Except target
y=df.iloc[:,-1]      # target Data

# Train_Test_split
from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)

print("Shape Of X_train=",X_train.shape)
print("Shape Of X_test=",X_test.shape)
print("Shape Of y_train=",y_train.shape)
print("Shape Of y_test=",y_test.shape)

"""##### Till Here we Done Preprocessing

# Train Support Vector Classification Model
"""

from sklearn.svm import SVC
# SVC(*, C=1, kernel="rbf", degree=3, gamma="scale", coef0=0, shrinking=True, probability=False, tol=0.001, cache_size=200, class_weight=None, verbose=False, max_iter=- 1, 
#           decision_function_shape="ovr", break_ties=False, random_state=None) -> None

# Applied SVC
classification_rbf = SVC(kernel="rbf")    

#Train the Model USing SVC
classification_rbf.fit(X_train,y_train)

"""#### Check Accuracy of data Without Scalling"""

#Test the Model using sVC
classification_rbf.score(X_test,y_test)

# Accuracy is 85%

"""#### Above accuracy we got without doing scaling of data So Now Check On Scaled Data

### Feature scaling-------------------
"""

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()

sc.fit(X_train)

# Scaled the train and test data set

X_train_sc=sc.transform(X_train)
X_test_sc=sc.transform(X_test)

X_train_sc

"""### Now Check The Accuracy after Scaling of Data"""

# Applied SVC
classification_rbf2 = SVC(kernel="rbf")    

#Train the Model USing SVC
classification_rbf2.fit(X_train_sc,y_train)

classification_rbf2.score(X_test_sc,y_test)

"""Accuracy is 95% (Improvement after scaling)

### SVC WITh Polynomial Kernal
"""

classification_poly = SVC(kernel="poly",degree=2)    

#Train the Model USing SVC
classification_poly.fit(X_train_sc,y_train)

classification_poly.score(X_test_sc,y_test)

"""### SVC WITh Linear Kernal"""

classification_linear = SVC(kernel="linear")    

#Train the Model USing SVC
classification_linear.fit(X_train_sc,y_train)

classification_linear.score(X_test_sc,y_test)

"""# Predict Cancer"""

# Data Collection Of One Patient in list format of all 30 Feature 
patient1 = [17.99,
 10.38,
 122.8,
 1001.0,
 0.1184,
 0.2776,
 0.3001,
 0.1471,
 0.2419,
 0.07871,
 1.095,
 0.9053,
 8.589,
 153.4,
 0.006399,
 0.04904,
 0.05373,
 0.01587,
 0.03003,
 0.006193,
 25.38,
 17.33,
 184.6,
 2019.0,
 0.1622,
 0.6656,
 0.7119,
 0.2654,
 0.4601,
 0.1189]

# Now Scale The Data  and Convert data in 2D Format
patient1_sc=sc.transform(np.array([patient1]))
patient1_sc

pred=classification_linear.predict(patient1_sc)
pred

"""Output = 0 it means Person Have Cancer"""

data.target_names

"""malignant= 0 index (Cancer Present)

benign  = 1 index (Cancer Not Present)
"""

if pred[0]==0:
  print("Patient Has cancer (malignant Tumer) ")
else:
  print("Patient Has No cancer (benign Tumer) ")

